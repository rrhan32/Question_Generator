{"version":3,"file":"index.cjs.production.min.js","sources":["../src/shared.ts","../src/hooks/useLatest.ts","../src/utils/arrayToMap.ts","../src/utils/isFileList.ts","../src/utils/isObject.ts","../src/utils/cloneObject.ts","../src/utils/compact.ts","../src/utils/isPlainObject.ts","../src/utils/deepMerge.ts","../src/utils/isUndefined.ts","../src/utils/filterErrors.ts","../src/utils/stringToPath.ts","../src/utils/get.ts","../src/utils/getIsDirty.ts","../src/utils/getPath.ts","../src/utils/isFunction.ts","../src/utils/isAsyncFunction.ts","../src/utils/isCheckboxInput.ts","../src/utils/isEmptyObject.ts","../src/utils/isFieldArray.ts","../src/utils/isFieldElement.ts","../src/utils/isFileInput.ts","../src/utils/isRadioInput.ts","../src/utils/isSelectMultiple.ts","../src/utils/parseState.ts","../src/utils/set.ts","../src/utils/setValuesAsTrue.ts","../src/utils/unset.ts","../src/useFormState.ts","../src/useControlled.ts","../src/useFieldArray.ts","../src/useForm.ts","../src/hooks/useState.ts","../src/utils/isSelectOne.ts","../src/utils/isInputElement.ts","../src/utils/isNumberInput.ts","../src/utils/isRangeInput.ts","../src/utils/runWithLowPriority.ts","../src/useFormMethods.ts"],"sourcesContent":["import { Methods, ObjMap } from \"./types\";\n\nlet one: Methods | undefined;\nconst all: ObjMap<Methods> = {};\n\nexport const get = (id?: string): Methods => (id ? all[id] : (one as Methods));\n\nexport const set = (id: string | undefined, methods: Methods): void => {\n  if (id) {\n    all[id] = methods;\n  } else {\n    one = methods;\n  }\n};\n\nexport const remove = (id?: string): void => {\n  if (id) {\n    delete all[id];\n  } else {\n    one = undefined;\n  }\n};\n","import { MutableRefObject, useRef } from \"react\";\n\nexport default <T>(val: T): MutableRefObject<T> => {\n  const ref = useRef(val);\n  ref.current = val;\n  return ref;\n};\n","import { ObjMap } from \"../types\";\n\nexport default (arr: any[], map: Record<string, string> = {}): ObjMap =>\n  arr.reduce((obj, key) => {\n    obj[map[key] || key] = true;\n    return obj;\n  }, {});\n","export default (value: unknown): value is FileList => value instanceof FileList;\n","export default (value: unknown): value is Object =>\n  value !== null && typeof value === \"object\";\n","import isFileList from \"./isFileList\";\nimport isObject from \"./isObject\";\n\nconst cloneObject = (object: unknown): any => {\n  if (object instanceof Event) throw new Error(\"Unable to clone event.\");\n\n  if (!isObject(object) || isFileList(object)) return object;\n\n  if (object instanceof Date) return new Date(object.getTime());\n\n  if (Array.isArray(object)) return object.map((val) => cloneObject(val));\n\n  return Object.keys(object).reduce((obj: Record<string, any>, key) => {\n    obj[key] = cloneObject((object as Record<string, any>)[key]);\n    return obj;\n  }, {});\n};\n\nexport default cloneObject;\n","export default (arr: any[]): any[] => arr.filter(Boolean);\n","import isObject from \"./isObject\";\n\nexport default (value: unknown): value is Object =>\n  !Array.isArray(value) && !(value instanceof Date) && isObject(value);\n","import isPlainObject from \"./isPlainObject\";\n\nconst deepMerge = (...objects: any[]): any =>\n  objects.reduce((prev, obj) => {\n    Object.keys(obj).forEach((key) => {\n      const prevValue = prev[key];\n      const currValue = obj[key];\n\n      if (Array.isArray(prevValue) && Array.isArray(currValue)) {\n        prev[key] = [...prevValue, ...currValue];\n      } else if (isPlainObject(prevValue) && isPlainObject(currValue)) {\n        prev[key] = deepMerge(prevValue, currValue);\n      } else {\n        prev[key] = currValue;\n      }\n    });\n\n    return prev;\n  }, {});\n\nexport default deepMerge;\n","export default (value: unknown): value is undefined => value === undefined;\n","import { ObjMap } from \"../types\";\nimport isPlainObject from \"./isPlainObject\";\nimport isUndefined from \"./isUndefined\";\n\nconst filterErrors = (error: unknown, touched: unknown): any => {\n  if (!isPlainObject(error)) return touched ? error : undefined;\n\n  return Object.keys(error).reduce((obj: ObjMap<any>, key) => {\n    const nextErrors = filterErrors(\n      (error as ObjMap<any>)[key],\n      (touched as ObjMap<any>)[key] || false\n    );\n\n    if (!isUndefined(nextErrors)) {\n      obj[key] = nextErrors;\n    } else {\n      delete obj[key];\n    }\n\n    return obj;\n  }, {});\n};\n\nexport default filterErrors;\n","import compact from \"./compact\";\n\nexport default (str: string): string[] => {\n  if (typeof str !== \"string\") throw new TypeError(\"Expected a string.\");\n  if (!str.length) return [];\n\n  return compact(str.split(/[.[\\]]+/));\n};\n","import isPlainObject from \"./isPlainObject\";\nimport isUndefined from \"./isUndefined\";\nimport stringToPath from \"./stringToPath\";\n\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\nexport default (object: any, path: string, defaultValue?: unknown): any => {\n  if (!isPlainObject(object) || !path) return defaultValue;\n\n  const value = stringToPath(path).reduce(\n    (obj, key) => (obj || {})[key],\n    object\n  );\n\n  return !isUndefined(value) ? value : defaultValue;\n};\n","import isObject from \"./isObject\";\n\nexport default (dirty: object): boolean => {\n  const search = (dty: object, found: any[] = []) => {\n    for (const val of Object.values(dty)) {\n      if (val === true) {\n        found.push(val);\n        return found;\n      }\n\n      if (isObject(val)) search(val, found);\n    }\n\n    return found;\n  };\n\n  return !!search(dirty).length;\n};\n","export default (path: string): string =>\n  ![\n    \"values\",\n    \"touched\",\n    \"errors\",\n    \"isDirty\",\n    \"dirty\",\n    \"isValidating\",\n    \"isValid\",\n    \"isSubmitting\",\n    \"isSubmitted\",\n    \"submitCount\",\n  ].some((key) => path.startsWith(key))\n    ? `values.${path}`\n    : path;\n","export default (value: unknown): value is Function =>\n  typeof value === \"function\";\n","import isFunction from \"./isFunction\";\n\nexport default (value: unknown): value is Promise<any> =>\n  isFunction(value) && value.constructor.name === \"AsyncFunction\";\n","import { FieldElement } from \"../types\";\n\nexport default (field: FieldElement): field is HTMLInputElement =>\n  field.type === \"checkbox\";\n","import { ObjMap } from \"../types\";\nimport isPlainObject from \"./isPlainObject\";\n\nexport default (value: unknown): value is ObjMap<never> =>\n  isPlainObject(value) && !Object.keys(value).length;\n","import { FieldArray } from \"../types\";\n\nexport default (\n  fields: FieldArray,\n  name: string,\n  callback?: (key: string) => void\n): string | void => {\n  let fieldName;\n\n  Object.keys(fields).some((key) => {\n    if (name.startsWith(key)) {\n      fieldName = key;\n      if (callback) callback(key);\n      return true;\n    }\n    return false;\n  });\n\n  return fieldName;\n};\n","import { FieldElement } from \"../types\";\n\nexport default (element: HTMLElement): element is FieldElement =>\n  /INPUT|TEXTAREA|SELECT/.test(element.tagName);\n","import { FieldElement } from \"../types\";\n\nexport default (field: FieldElement): field is HTMLInputElement =>\n  field.type === \"file\";\n","import { FieldElement } from \"../types\";\n\nexport default (field: FieldElement): field is HTMLInputElement =>\n  field.type === \"radio\";\n","import { FieldElement } from \"../types\";\n\nexport default (field: FieldElement): field is HTMLSelectElement =>\n  field.type === \"select-multiple\";\n","import { FormState, ObjMap, Path } from \"../types\";\nimport get from \"./get\";\nimport getPath from \"./getPath\";\nimport isPlainObject from \"./isPlainObject\";\n\nexport default (\n  path: Path | undefined,\n  state: FormState,\n  pathHandler = getPath,\n  stateHandler?: (path: string, state: any) => any,\n  isGetState?: boolean\n): any => {\n  if (!path) return isGetState ? state : undefined;\n\n  let parsedState;\n\n  if (Array.isArray(path)) {\n    parsedState = path.map((p) => {\n      p = pathHandler(p);\n      const value = get(state, p);\n      return stateHandler ? stateHandler(p, value) : value;\n    });\n  } else if (isPlainObject(path)) {\n    const paths = path as ObjMap<string>;\n    parsedState = Object.keys(paths).reduce((s: ObjMap<any>, key) => {\n      path = pathHandler(paths[key]);\n      const value = get(state, path);\n      s[key] = stateHandler ? stateHandler(path, value) : value;\n      return s;\n    }, {});\n  } else {\n    path = pathHandler(path);\n    const value = get(state, path);\n    parsedState = stateHandler ? stateHandler(path, value) : value;\n  }\n\n  return parsedState;\n};\n","import cloneObject from \"./cloneObject\";\nimport isPlainObject from \"./isPlainObject\";\nimport stringToPath from \"./stringToPath\";\n\nexport default (\n  // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\n  object: any,\n  path: string,\n  value: unknown,\n  immutable?: boolean\n): any => {\n  if (!isPlainObject(object)) throw new TypeError(\"Expected an object.\");\n\n  const newObject = immutable ? cloneObject(object) : object;\n  const segs = stringToPath(path);\n\n  segs.slice(0, -1).reduce((obj, key, idx) => {\n    const nextIsNumber = !Number.isNaN(+segs[idx + 1]);\n    if (\n      (isPlainObject(obj[key]) && !nextIsNumber) ||\n      (Array.isArray(obj[key]) && nextIsNumber)\n    )\n      return obj[key];\n    obj[key] = nextIsNumber ? [] : {};\n    return obj[key];\n  }, newObject)[segs[segs.length - 1] || \"\"] = value;\n\n  return newObject;\n};\n","import isPlainObject from \"./isPlainObject\";\n\nconst setValuesAsTrue = (object: unknown): any => {\n  if (!Array.isArray(object) && !isPlainObject(object)) return true;\n\n  if (Array.isArray(object)) return object.map((val) => setValuesAsTrue(val));\n\n  return Object.keys(object).reduce((obj: Record<string, any>, key) => {\n    obj[key] = setValuesAsTrue((object as Record<string, any>)[key]);\n    return obj;\n  }, {});\n};\n\nexport default setValuesAsTrue;\n","import cloneObject from \"./cloneObject\";\nimport isEmptyObject from \"./isEmptyObject\";\nimport isPlainObject from \"./isPlainObject\";\nimport isUndefined from \"./isUndefined\";\nimport stringToPath from \"./stringToPath\";\n\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\nconst unset = (object: any, path: string, immutable?: boolean): any => {\n  if (!isPlainObject(object)) throw new TypeError(\"Expected an object.\");\n\n  const refObject = immutable ? cloneObject(object) : object;\n  const newObject = refObject;\n\n  // eslint-disable-next-line no-prototype-builtins\n  if (newObject.hasOwnProperty(path)) {\n    delete newObject[path];\n    return refObject;\n  }\n\n  const segs = stringToPath(path);\n\n  if (!segs.length) return refObject;\n\n  const last = segs.pop() as string;\n  const target = segs.reduce((obj, key) => (obj || {})[key], newObject);\n\n  if (Array.isArray(target)) {\n    let index = +last;\n\n    if (index < target.length - 1) {\n      delete target[index];\n    } else {\n      while (index >= 0) {\n        // @ts-expect-error\n        if (index == last || isUndefined(target[index])) {\n          target.splice(index, 1);\n          index -= 1;\n        } else {\n          break;\n        }\n      }\n    }\n  } else if (isPlainObject(target)) {\n    delete target[last];\n  }\n\n  return isEmptyObject(target) ||\n    (Array.isArray(target) && !target.filter((t) => !isUndefined(t)).length)\n    ? unset(refObject, segs.join(\".\"))\n    : refObject;\n};\n\nexport default unset;\n","/* eslint-disable react-hooks/rules-of-hooks */\n\nimport { useEffect, useReducer, useRef } from \"react\";\n\nimport {\n  FormStateCallback,\n  FormStateConfig,\n  FormValues,\n  Methods,\n  Observer,\n  Path,\n} from \"./types\";\nimport { get } from \"./shared\";\nimport { invariant, isFunction, parseState } from \"./utils\";\n\nexport default <V extends FormValues = FormValues>(\n  path: Path,\n  configOrCallback: FormStateCallback | FormStateConfig<V>,\n  formId?: string\n): any => {\n  const config = !isFunction(configOrCallback) ? configOrCallback : {};\n  const methods: Methods<V> = get(config?.formId || formId);\n\n  invariant(\n    !methods,\n    `💡 react-cool-form > useFormState: It must work with an \"useForm\" hook. See: https://react-cool-form.netlify.app/docs/api-reference/use-form`\n  );\n\n  const observerRef = useRef<Observer<V>>();\n  const [, forceUpdate] = useReducer((c) => c + 1, 0);\n  const { observersRef, getFormState } = methods;\n  const callback = isFunction(configOrCallback) ? configOrCallback : undefined;\n\n  useEffect(() => {\n    observersRef.current.push(observerRef.current!);\n\n    return () => {\n      observersRef.current = observersRef.current.filter(\n        (o) => o !== observerRef.current\n      );\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return getFormState(path, {\n    ...config,\n    methodName: callback ? \"useFormStateCallback\" : \"useFormState\",\n    callback: (usedState) => {\n      if (!observerRef.current)\n        observerRef.current = {\n          usedState,\n          notify: callback\n            ? (state) => callback(parseState(path, state))\n            : forceUpdate,\n        };\n    },\n  });\n};\n","import { useEffect } from \"react\";\n\nimport {\n  ControlledConfig,\n  ControlledReturn,\n  FormValues,\n  Methods,\n} from \"./types\";\nimport * as shared from \"./shared\";\nimport {\n  get,\n  invariant,\n  isFieldArray,\n  isFieldElement,\n  isUndefined,\n  warn,\n} from \"./utils\";\nimport useFormState from \"./useFormState\";\n\nexport default <V extends FormValues = FormValues>(\n  name: string,\n  {\n    formId,\n    defaultValue,\n    validate,\n    parse,\n    format,\n    errorWithTouched,\n    ...props\n  }: ControlledConfig<V> = {}\n): ControlledReturn => {\n  const methods: Methods<V> = shared.get(formId);\n\n  invariant(\n    !methods,\n    '💡 react-cool-form > useControlled: It must work with an \"useForm\" hook. See: https://react-cool-form.netlify.app/docs/api-reference/use-form'\n  );\n\n  const meta = useFormState(\n    {\n      value: `values.${name}`,\n      error: `errors.${name}`,\n      isTouched: `touched.${name}`,\n      isDirty: `dirty.${name}`,\n    },\n    { formId, errorWithTouched }\n  );\n  const {\n    shouldRemoveField,\n    initialStateRef,\n    fieldArrayRef,\n    controlsRef,\n    fieldValidatorsRef,\n    changedFieldRef,\n    getState,\n    getNodeValue,\n    setDefaultValue,\n    setTouchedMaybeValidate,\n    handleChangeEvent,\n    removeField,\n  } = methods;\n\n  useEffect(\n    () => {\n      const isFieldArr = isFieldArray(fieldArrayRef.current, name);\n      const initialVal = get(initialStateRef.current.values, name);\n\n      if (isUndefined(initialVal)) {\n        if (\n          !isUndefined(defaultValue) &&\n          (!isFieldArr ||\n            !isUndefined(\n              get(initialStateRef.current.values, name.split(\".\")[0])\n            ))\n        ) {\n          setDefaultValue(name, defaultValue);\n        } else if (!isFieldArr) {\n          warn(\n            `💡 react-cool-form > useControlled: Please provide a default value for \"${name}\" field.`\n          );\n        }\n      } else if (isUndefined(getState(name))) {\n        setDefaultValue(name, initialVal);\n      }\n\n      return () => {\n        if (shouldRemoveField(name))\n          removeField(\n            name,\n            !isFieldArr ||\n              isUndefined(\n                // eslint-disable-next-line react-hooks/exhaustive-deps\n                get(initialStateRef.current.values, name.split(\".\")[0])\n              )\n              ? undefined\n              : [\"defaultValue\"]\n          );\n      };\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    []\n  );\n\n  controlsRef.current[name] = true;\n  if (validate) fieldValidatorsRef.current[name] = validate;\n\n  const { onChange, onBlur, ...restProps } = props;\n  let value = get(initialStateRef.current.values, name);\n  value = !isUndefined(value) ? value : defaultValue;\n  value = !isUndefined(meta.value) ? meta.value : value;\n  value = (format ? format(value) : value) ?? \"\";\n\n  return [\n    {\n      name,\n      value,\n      onChange: (...event) => {\n        let val;\n\n        if (parse) {\n          val = parse(...event);\n        } else {\n          const e = event[0];\n          val =\n            e?.nativeEvent instanceof Event && isFieldElement(e.target)\n              ? getNodeValue(name)\n              : e;\n        }\n\n        handleChangeEvent(name, val);\n        if (onChange) onChange(...event);\n        changedFieldRef.current = name;\n      },\n      onBlur: (e) => {\n        setTouchedMaybeValidate(name);\n        if (onBlur) onBlur(e);\n        changedFieldRef.current = undefined;\n      },\n      ...restProps,\n    },\n    { error: meta.error, isTouched: !!meta.isTouched, isDirty: !!meta.isDirty },\n  ];\n};\n","import { useCallback, useEffect, useState } from \"react\";\n\nimport {\n  FieldArrayConfig,\n  FieldArrayReturn,\n  FormValues,\n  Insert,\n  Keys,\n  Methods,\n  Move,\n  Push,\n  Remove,\n  StateHandler,\n  Swap,\n} from \"./types\";\nimport * as shared from \"./shared\";\nimport {\n  compact,\n  get,\n  getIsDirty,\n  invariant,\n  isUndefined,\n  set,\n  setValuesAsTrue,\n} from \"./utils\";\n\nexport default <T = any, V extends FormValues = FormValues>(\n  name: string,\n  { formId, defaultValue, validate }: FieldArrayConfig<T, V> = {}\n): FieldArrayReturn<T> => {\n  const methods: Methods<V> = shared.get(formId);\n\n  invariant(\n    !methods,\n    '💡 react-cool-form > useFieldArray: It must work with an \"useForm\" hook. See: https://react-cool-form.netlify.app/docs/api-reference/use-form'\n  );\n\n  const {\n    validateOnChange,\n    shouldRemoveField,\n    initialStateRef,\n    fieldArrayRef,\n    fieldValidatorsRef,\n    getState,\n    setDefaultValue,\n    setNodesOrValues,\n    setStateRef,\n    runValidation,\n    removeField,\n  } = methods;\n\n  const getFields = useCallback(\n    (init = false): string[] => {\n      let fields = getState(name);\n\n      if (init && isUndefined(fields)) fields = defaultValue;\n\n      return Array.isArray(fields)\n        ? fields.map((_, index) => `${name}[${index}]`)\n        : [];\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [getState, name]\n  );\n\n  const [fields, setFields] = useState<string[]>(getFields(true));\n\n  const updateFields = useCallback(() => {\n    setFields(getFields());\n    setNodesOrValues(getState(\"values\"), {\n      shouldSetValues: false,\n      fields: Object.keys(fieldArrayRef.current[name].fields),\n    });\n  }, [fieldArrayRef, getFields, getState, name, setNodesOrValues]);\n\n  useEffect(() => {\n    if (\n      isUndefined(get(initialStateRef.current.values, name)) &&\n      !isUndefined(defaultValue)\n    ) {\n      setDefaultValue(name, defaultValue, true);\n      updateFields();\n    }\n\n    return () => {\n      if (shouldRemoveField(name)) removeField(name);\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  if (!fieldArrayRef.current[name])\n    fieldArrayRef.current[name] = {\n      reset: updateFields,\n      fields: {},\n    };\n  if (validate) fieldValidatorsRef.current[name] = validate;\n\n  const setState = useCallback(\n    (\n      handler: StateHandler,\n      {\n        shouldTouched,\n        shouldDirty,\n      }: { shouldTouched?: boolean; shouldDirty?: boolean } = {}\n    ) => {\n      let state = getState();\n\n      ([\"values\", \"touched\", \"errors\", \"dirty\"] as Keys[]).forEach((key) => {\n        const value = state[key][name];\n        const fieldsLength = state.values[name]?.length;\n\n        if (\n          key === \"values\" ||\n          (key === \"touched\" && shouldTouched) ||\n          (key === \"dirty\" && shouldDirty) ||\n          !isUndefined(value)\n        )\n          state = set(\n            state,\n            key,\n            {\n              ...state[key],\n              [name]: handler(\n                Array.isArray(value) ? [...value] : [],\n                key,\n                fieldsLength ? fieldsLength - 1 : 0\n              ),\n            },\n            true\n          );\n      });\n\n      setStateRef(\"\", { ...state, shouldDirty: getIsDirty(state.dirty) });\n      updateFields();\n\n      if (validateOnChange) runValidation(name);\n    },\n    [getState, name, runValidation, setStateRef, updateFields, validateOnChange]\n  );\n\n  const push = useCallback<Push<T>>(\n    (value, { shouldTouched, shouldDirty = true } = {}) => {\n      const handler: StateHandler = (f, type, lastIndex = 0) => {\n        if (type === \"values\") {\n          f.push(value);\n        } else if (\n          (type === \"touched\" && shouldTouched) ||\n          (type === \"dirty\" && shouldDirty)\n        ) {\n          f[lastIndex] = setValuesAsTrue(value);\n        }\n\n        return f;\n      };\n\n      setState(handler, { shouldTouched, shouldDirty });\n    },\n    [setState]\n  );\n\n  const insert = useCallback<Insert<T>>(\n    (index, value, { shouldTouched, shouldDirty = true } = {}) => {\n      const handler: StateHandler = (f, type) => {\n        if (type === \"values\") {\n          f.splice(index, 0, value);\n        } else if (\n          (type === \"touched\" && shouldTouched) ||\n          (type === \"dirty\" && shouldDirty)\n        ) {\n          f[index] = setValuesAsTrue(value);\n        } else if (index < f.length) {\n          f.splice(index, 0, undefined);\n        }\n\n        return f;\n      };\n\n      setState(handler, { shouldTouched, shouldDirty });\n    },\n    [setState]\n  );\n\n  const remove = useCallback<Remove<T>>(\n    (index) => {\n      const handler: StateHandler = (f) => {\n        f.splice(index, 1);\n        return compact(f).length ? f : [];\n      };\n      const value = (getState(name) || [])[index];\n\n      setState(handler);\n\n      return value;\n    },\n    [getState, name, setState]\n  );\n\n  const swap = useCallback<Swap>(\n    (indexA, indexB) => {\n      const handler: StateHandler = (f) => {\n        [f[indexA], f[indexB]] = [f[indexB], f[indexA]];\n        return f;\n      };\n\n      setState(handler);\n    },\n    [setState]\n  );\n\n  const move = useCallback<Move>(\n    (from, to) => {\n      const handler: StateHandler = (f) => {\n        f.splice(to, 0, f.splice(from, 1)[0]);\n        return f;\n      };\n\n      setState(handler);\n    },\n    [setState]\n  );\n\n  return [fields, { push, insert, remove, swap, move }];\n};\n","/* eslint-disable @typescript-eslint/no-use-before-define */\n\nimport { useCallback, useEffect, useRef } from \"react\";\nimport { dequal } from \"dequal/lite\";\n\nimport * as shared from \"./shared\";\nimport {\n  ClearErrors,\n  FieldArray,\n  FieldElement,\n  Fields,\n  FieldValidator,\n  Focus,\n  FormConfig,\n  FormErrors,\n  FormMethods,\n  FormState,\n  FormValues,\n  GetFormState,\n  GetNodeValue,\n  GetState,\n  HandleChangeEvent,\n  Handlers,\n  ObjMap,\n  Parsers,\n  RegisterField,\n  RegisterForm,\n  RemoveField,\n  Reset,\n  RunValidation,\n  SetDefaultValue,\n  SetDirty,\n  SetError,\n  SetNodesOrValues,\n  SetTouched,\n  SetTouchedMaybeValidate,\n  SetValue,\n  ShouldRemoveField,\n  Submit,\n  Use,\n} from \"./types\";\nimport { useLatest, useState } from \"./hooks\";\nimport {\n  arrayToMap,\n  compact,\n  deepMerge,\n  filterErrors,\n  get,\n  getPath,\n  isAsyncFunction,\n  isCheckboxInput,\n  isEmptyObject,\n  isFieldArray,\n  isFieldElement,\n  isFileInput,\n  isFileList,\n  isFunction,\n  isInputElement,\n  isNumberInput,\n  isPlainObject,\n  isRadioInput,\n  isRangeInput,\n  isSelectMultiple,\n  isSelectOne,\n  isUndefined,\n  parseState,\n  runWithLowPriority,\n  set,\n  unset,\n  warn,\n} from \"./utils\";\n\nexport default <V extends FormValues = FormValues>({\n  id,\n  defaultValues = {} as V,\n  validate,\n  validateOnChange = true,\n  validateOnBlur = true,\n  focusOnError = true,\n  removeOnUnmounted = true,\n  builtInValidationMode = \"message\",\n  excludeFields = [],\n  onReset,\n  onSubmit,\n  onError,\n  onStateChange,\n}: FormConfig<V> = {}): FormMethods<V> => {\n  const handlersRef = useRef<Handlers>({});\n  const mutationObserverRef = useRef<MutationObserver>();\n  const formRef = useRef<HTMLElement>();\n  const fieldsRef = useRef<Fields>(new Map());\n  const fieldParsersRef = useRef<Parsers>({});\n  const fieldArrayRef = useRef<FieldArray>({});\n  const controlsRef = useRef<ObjMap>({});\n  const formValidatorRef = useLatest(validate);\n  const fieldValidatorsRef = useRef<ObjMap<FieldValidator<V>>>({});\n  const changedFieldRef = useRef<string>();\n  const excludeFieldsRef = useRef<ObjMap>(arrayToMap(excludeFields));\n  const onResetRef = useLatest(onReset || (() => undefined));\n  const onSubmitRef = useLatest(onSubmit || (() => undefined));\n  const onErrorRef = useLatest(onError || (() => undefined));\n  const hasWarnValues = useRef(false);\n  const initialStateRef = useRef<FormState<V>>({\n    values: defaultValues,\n    touched: {},\n    errors: {},\n    isDirty: false,\n    dirty: {},\n    isValidating: false,\n    isValid: true,\n    isSubmitting: false,\n    isSubmitted: false,\n    submitCount: 0,\n  });\n  const { stateRef, setStateRef, observersRef } = useState<V>(\n    { ...initialStateRef.current },\n    onStateChange\n  );\n\n  const handleUnset = useCallback(\n    (\n      path: string,\n      options?: { shouldSkipUpdate?: boolean; shouldForceUpdate?: boolean }\n    ) => {\n      const segs = path.split(\".\");\n      const k = segs.shift() as string;\n      setStateRef(\n        k,\n        unset(stateRef.current[k as keyof FormState<V>], segs.join(\".\"), true),\n        { fieldPath: path, ...options }\n      );\n    },\n    [setStateRef, stateRef]\n  );\n\n  const handleFocus = useCallback((name: string) => {\n    const field =\n      fieldsRef.current.get(name)?.field ||\n      fieldsRef.current.get(\n        Array.from(fieldsRef.current.keys()).find((n) => n.startsWith(name)) ||\n          \"\"\n      )?.field;\n\n    if (field && isFunction(field.focus)) field.focus();\n  }, []);\n\n  const getFields = useCallback(\n    (form: HTMLElement) =>\n      Array.from(form.querySelectorAll(\"input,textarea,select\"))\n        .filter((element) => {\n          const field = element as FieldElement;\n          const {\n            type,\n            name,\n            id: fieldId,\n            classList,\n            dataset: { rcfExclude },\n          } = field;\n          const { current: exclude } = excludeFieldsRef;\n\n          if (\n            /button|image|submit|reset/.test(type) ||\n            (fieldId && exclude[`#${fieldId}`]) ||\n            Array.from(classList).find((n) => exclude[`.${n}`])\n          )\n            return false;\n\n          if (rcfExclude !== \"true\" && !name) {\n            warn(\n              '💡 react-cool-form > field: Missing \"name\" attribute. Do you want to exclude the field? See: https://react-cool-form.netlify.app/docs/api-reference/use-form/#excludefields'\n            );\n            return false;\n          }\n\n          return (\n            controlsRef.current[name] ||\n            (rcfExclude !== \"true\" && !exclude[name])\n          );\n        })\n        .reduce((acc, elm) => {\n          const field = elm as FieldElement;\n          const { name } = field;\n          const fieldArrayName = isFieldArray(fieldArrayRef.current, name);\n\n          if (fieldArrayName)\n            fieldArrayRef.current[fieldArrayName].fields[name] = true;\n\n          acc.set(name, {\n            ...acc.get(name),\n            field: acc.get(name)?.field || field,\n          });\n\n          if (isCheckboxInput(field) || isRadioInput(field)) {\n            acc.get(name).options = acc.get(name).options\n              ? [...acc.get(name).options, field]\n              : [field];\n          } else if (isSelectOne(field) || isSelectMultiple(field)) {\n            acc.get(name).options = Array.from(field.options);\n          }\n\n          return acc;\n        }, new Map()),\n    []\n  );\n\n  const getNodeValue = useCallback<GetNodeValue>(\n    (name, fields = fieldsRef.current) => {\n      if (!fields.has(name)) return undefined;\n\n      const { field, options } = fields.get(name)!;\n\n      if (isInputElement(field)) {\n        if (fieldParsersRef.current[name]?.valueAsNumber)\n          return field.valueAsNumber;\n        if (fieldParsersRef.current[name]?.valueAsDate)\n          return field.valueAsDate;\n      }\n\n      if (isNumberInput(field) || isRangeInput(field))\n        return field.valueAsNumber || \"\";\n\n      if (isCheckboxInput(field)) {\n        const checkboxes = options as HTMLInputElement[];\n\n        if (checkboxes.length > 1)\n          return checkboxes.filter((c) => c.checked).map((c) => c.value);\n\n        const checkbox = checkboxes[0];\n\n        if (checkbox.hasAttribute(\"value\") && checkbox.value)\n          return checkbox.checked ? [checkbox.value] : [];\n\n        return checkbox.checked;\n      }\n\n      if (isRadioInput(field))\n        return (\n          (options as HTMLInputElement[]).find((radio) => radio.checked)\n            ?.value || \"\"\n        );\n\n      if (isSelectMultiple(field))\n        return (options as HTMLOptionElement[])\n          .filter((option) => option.selected)\n          .map((option) => option.value);\n\n      if (isFileInput(field)) return field.files;\n\n      return field.value;\n    },\n    []\n  );\n\n  const setNodeValue = useCallback(\n    (name: string, value: any, fields: Fields = fieldsRef.current) => {\n      if (!fields.has(name) || controlsRef.current[name]) return;\n\n      const { field, options } = fields.get(name)!;\n\n      if (isCheckboxInput(field)) {\n        const checkboxes = options as HTMLInputElement[];\n\n        if (checkboxes.length > 1) {\n          checkboxes.forEach((checkbox) => {\n            checkbox.checked = Array.isArray(value)\n              ? value.includes(checkbox.value)\n              : !!value;\n          });\n        } else {\n          checkboxes[0].checked = !!value;\n        }\n      } else if (isRadioInput(field)) {\n        (options as HTMLInputElement[]).forEach((radio) => {\n          radio.checked = radio.value === value;\n        });\n      } else if (isSelectMultiple(field) && Array.isArray(value)) {\n        (options as HTMLOptionElement[]).forEach((option) => {\n          option.selected = !!value.includes(option.value);\n        });\n      } else if (isFileInput(field)) {\n        if (isFileList(value)) field.files = value;\n        if (!value) field.value = \"\";\n      } else {\n        field.value = value ?? \"\";\n      }\n    },\n    []\n  );\n\n  const setDefaultValue = useCallback<SetDefaultValue>(\n    (\n      name,\n      value,\n      shouldUpdateDefaultValue = !isFieldArray(fieldArrayRef.current, name) ||\n        !isUndefined(get(initialStateRef.current.values, name.split(\".\")[0]))\n    ) => {\n      if (shouldUpdateDefaultValue)\n        initialStateRef.current.values = set(\n          initialStateRef.current.values,\n          name,\n          value,\n          true\n        );\n\n      if (!dequal(get(stateRef.current.values, name), value))\n        setStateRef(`values.${name}`, value, { shouldSkipUpdate: true });\n    },\n    [setStateRef, stateRef]\n  );\n\n  const setNodesOrValues = useCallback<SetNodesOrValues<V>>(\n    (\n      values,\n      {\n        shouldSetValues = true,\n        fields = Array.from(fieldsRef.current.keys()),\n      } = {}\n    ) =>\n      fields.forEach((name) => {\n        if (controlsRef.current[name]) return;\n\n        const value = get(values, name);\n\n        if (!isUndefined(value)) setNodeValue(name, value);\n\n        if (shouldSetValues)\n          setDefaultValue(\n            name,\n            !isUndefined(value) ? value : getNodeValue(name)\n          );\n      }),\n    [getNodeValue, setDefaultValue, setNodeValue]\n  );\n\n  const setError = useCallback<SetError>(\n    (name, error) => {\n      error = isFunction(error)\n        ? error(get(stateRef.current.errors, name))\n        : error;\n\n      if (error) {\n        setStateRef(`errors.${name}`, error);\n      } else {\n        handleUnset(`errors.${name}`);\n      }\n    },\n    [handleUnset, setStateRef, stateRef]\n  );\n\n  const clearErrors = useCallback<ClearErrors>(\n    (name) => {\n      if (!name) {\n        setStateRef(\"errors\", {});\n      } else if (Array.isArray(name)) {\n        name.forEach((n) => setError(n));\n      } else {\n        setError(name);\n      }\n    },\n    [setError, setStateRef]\n  );\n\n  const runBuiltInValidation = useCallback(\n    (name: string) => {\n      if (builtInValidationMode === false || !fieldsRef.current.has(name))\n        return undefined;\n\n      const {\n        field: { validity, validationMessage },\n      } = fieldsRef.current.get(name)!;\n\n      if (builtInValidationMode === \"state\")\n        for (const k in validity)\n          if (k !== \"valid\" && validity[k as keyof ValidityState]) return k;\n\n      return validationMessage;\n    },\n    [builtInValidationMode]\n  );\n\n  const runAllBuiltInValidation = useCallback(() => {\n    if (builtInValidationMode === false) return {};\n\n    return Array.from(fieldsRef.current.keys()).reduce((errors, name) => {\n      const error = runBuiltInValidation(name);\n      errors = { ...errors, ...(error ? set(errors, name, error) : {}) };\n      return errors;\n    }, {});\n  }, [builtInValidationMode, runBuiltInValidation]);\n\n  const runFieldValidation = useCallback(\n    async (name: string): Promise<any> => {\n      const value = get(stateRef.current.values, name);\n\n      if (!fieldValidatorsRef.current[name] || isUndefined(value))\n        return undefined;\n\n      try {\n        const error = await fieldValidatorsRef.current[name](\n          value,\n          stateRef.current.values\n        );\n\n        return error;\n      } catch (exception) {\n        warn(`💡 react-cool-form > validate ${name}: `, exception);\n        throw exception;\n      }\n    },\n    [stateRef]\n  );\n\n  const runAllFieldsValidation = useCallback((): Promise<FormErrors<V>> => {\n    const promises = Object.keys(fieldValidatorsRef.current).map((name) =>\n      runFieldValidation(name)\n    );\n\n    return Promise.all(promises).then((errors) =>\n      Object.keys(fieldValidatorsRef.current).reduce((acc, cur, idx) => {\n        acc = { ...acc, ...(errors[idx] ? set(acc, cur, errors[idx]) : {}) };\n        return acc;\n      }, {})\n    );\n  }, [runFieldValidation]);\n\n  const runFormValidation = useCallback(\n    async (name?: string): Promise<any> => {\n      if (!formValidatorRef.current) return name ? undefined : {};\n\n      try {\n        const errors = await formValidatorRef.current(stateRef.current.values);\n\n        if (name) return get(errors, name);\n\n        return isPlainObject(errors) ? errors : {};\n      } catch (exception) {\n        warn(`💡 react-cool-form > validate form: `, exception);\n        throw exception;\n      }\n    },\n    [formValidatorRef, stateRef]\n  );\n\n  const validateField = useCallback(\n    async (name: string) => {\n      const hasAsyncValidator =\n        isAsyncFunction(formValidatorRef.current) ||\n        isAsyncFunction(fieldValidatorsRef.current[name]);\n\n      if (hasAsyncValidator) setStateRef(\"isValidating\", true);\n\n      try {\n        const error =\n          (await runFormValidation(name)) ||\n          (await runFieldValidation(name)) ||\n          runBuiltInValidation(name);\n\n        setError(name, error);\n        if (hasAsyncValidator) setStateRef(\"isValidating\", false);\n\n        return error;\n      } catch (exception) {\n        return exception;\n      }\n    },\n    [\n      formValidatorRef,\n      runBuiltInValidation,\n      runFieldValidation,\n      runFormValidation,\n      setError,\n      setStateRef,\n    ]\n  );\n\n  const validateFieldWithLowPriority = useCallback<typeof validateField>(\n    (name) => runWithLowPriority(() => validateField(name)),\n    [validateField]\n  );\n\n  const validateForm = useCallback((): Promise<FormErrors<V>> => {\n    setStateRef(\"isValidating\", true);\n\n    return Promise.all([\n      runAllBuiltInValidation(),\n      runAllFieldsValidation(),\n      runFormValidation(),\n    ]).then((errors) => {\n      const errs = deepMerge(...errors);\n\n      setStateRef(\"errors\", errs);\n      setStateRef(\"isValidating\", false);\n\n      return errs;\n    });\n  }, [\n    runAllBuiltInValidation,\n    runAllFieldsValidation,\n    runFormValidation,\n    setStateRef,\n  ]);\n\n  const runValidation = useCallback<RunValidation>(\n    (name, { shouldFocus = focusOnError } = {}) => {\n      let names: string[] = [];\n\n      if (shouldFocus) {\n        names = Array.isArray(shouldFocus)\n          ? shouldFocus\n          : Array.from(fieldsRef.current.keys());\n        names = isFunction(shouldFocus) ? shouldFocus(names) : names;\n      }\n\n      if (!name)\n        return validateForm().then((errors) => {\n          if (shouldFocus) {\n            const fieldName = names.find((n) => get(errors, n));\n            if (fieldName) handleFocus(fieldName);\n          }\n\n          return isEmptyObject(errors);\n        });\n\n      if (Array.isArray(name))\n        return Promise.all(name.map((n) => validateField(n))).then((errors) => {\n          if (shouldFocus) {\n            const fieldName = names.find((n) => !!errors[name.indexOf(n)]);\n            if (fieldName) handleFocus(fieldName);\n          }\n\n          return !compact(errors).length;\n        });\n\n      return validateField(name).then((error) => {\n        if (shouldFocus && error && names.includes(name)) handleFocus(name);\n\n        return !error;\n      });\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [handleFocus, validateField, validateForm]\n  );\n\n  const getFormState = useCallback<GetFormState<V>>(\n    (\n      path,\n      {\n        errorWithTouched,\n        defaultValues: dfValues = {},\n        methodName = \"getState\",\n        callback,\n      } = {}\n    ) => {\n      const usedState: ObjMap = {};\n      const state = parseState(\n        path,\n        stateRef.current,\n        (p) => {\n          p = getPath(p);\n\n          if (methodName !== \"getState\") {\n            if (\n              p === \"values\" &&\n              methodName !== \"useFormStateCallback\" &&\n              !hasWarnValues.current\n            ) {\n              warn(\n                `💡 react-cool-form > ${methodName}: Getting \"values\" alone might cause unnecessary re-renders. If you know what you're doing, just ignore this warning. See: https://react-cool-form.netlify.app/docs/getting-started/form-state#best-practices`\n              );\n              hasWarnValues.current = true;\n            }\n\n            usedState[p] = true;\n          }\n\n          return p;\n        },\n        (p, v) => {\n          if (methodName === \"getState\") return v;\n\n          if (p.startsWith(\"values\")) {\n            if (!isUndefined(v)) return v;\n\n            p = p.replace(\"values.\", \"\");\n            v = get(initialStateRef.current, p);\n\n            return !isUndefined(v) ? v : get(dfValues, p);\n          }\n\n          if (!errorWithTouched || !p.startsWith(\"errors\")) return v;\n\n          p = p.replace(\"errors\", \"touched\");\n          usedState[p] = true;\n\n          return filterErrors(v, get(stateRef.current, p));\n        },\n        methodName === \"getState\"\n      );\n\n      if (callback) callback(usedState);\n\n      return state;\n    },\n    [stateRef]\n  );\n\n  const focus = useCallback<Focus>(\n    (name, delay) => {\n      if (!isUndefined(delay)) {\n        setTimeout(() => handleFocus(name), delay);\n      } else {\n        handleFocus(name);\n      }\n    },\n    [handleFocus]\n  );\n\n  const use = useCallback<Use<V>>(\n    (path, { errorWithTouched, defaultValues: dfValues } = {}) =>\n      getFormState(path, {\n        errorWithTouched,\n        defaultValues: dfValues,\n        methodName: \"use\",\n        callback: (usedState) => {\n          observersRef.current[0].usedState = {\n            ...observersRef.current[0].usedState,\n            ...usedState,\n          };\n        },\n      }),\n    [getFormState, observersRef]\n  );\n\n  const getState = useCallback<GetState>(\n    (path) => getFormState(path),\n    [getFormState]\n  );\n\n  const setTouched = useCallback<SetTouched>(\n    (name, isTouched = true, { shouldValidate = validateOnBlur } = {}) => {\n      if (isTouched) {\n        setStateRef(`touched.${name}`, true);\n      } else {\n        handleUnset(`touched.${name}`);\n      }\n\n      if (shouldValidate) validateFieldWithLowPriority(name);\n    },\n    [handleUnset, setStateRef, validateFieldWithLowPriority, validateOnBlur]\n  );\n\n  const setTouchedMaybeValidate = useCallback<SetTouchedMaybeValidate>(\n    (name) =>\n      setTouched(name, true, {\n        shouldValidate: validateOnChange\n          ? name !== changedFieldRef.current\n          : undefined,\n      }),\n    [setTouched, validateOnChange]\n  );\n\n  const setDirty = useCallback<SetDirty>(\n    (name, isDirty = true) => {\n      if (isDirty) {\n        setStateRef(`dirty.${name}`, true);\n      } else {\n        handleUnset(`dirty.${name}`);\n      }\n    },\n    [handleUnset, setStateRef]\n  );\n\n  const setDirtyIfNeeded = useCallback(\n    (name: string) =>\n      setDirty(\n        name,\n        !dequal(\n          get(stateRef.current.values, name),\n          get(initialStateRef.current.values, name)\n        )\n      ),\n    [setDirty, stateRef]\n  );\n\n  const setValue = useCallback<SetValue>(\n    (\n      name,\n      value,\n      {\n        shouldValidate = validateOnChange,\n        shouldTouched = true,\n        shouldDirty = true,\n      } = {}\n    ) => {\n      value = isFunction(value)\n        ? value(get(stateRef.current.values, name))\n        : value;\n\n      if (!isUndefined(value)) {\n        setStateRef(`values.${name}`, value);\n      } else {\n        handleUnset(`values.${name}`);\n      }\n      setNodeValue(name, value);\n\n      isFieldArray(fieldArrayRef.current, name, (key) =>\n        fieldArrayRef.current[key].reset()\n      );\n\n      if (shouldTouched) setTouched(name, true, { shouldValidate: false });\n      if (shouldDirty) setDirtyIfNeeded(name);\n      if (shouldValidate) validateFieldWithLowPriority(name);\n    },\n    [\n      handleUnset,\n      setDirtyIfNeeded,\n      setNodeValue,\n      setStateRef,\n      setTouched,\n      stateRef,\n      validateFieldWithLowPriority,\n      validateOnChange,\n    ]\n  );\n\n  const getOptions = useCallback(\n    () => ({\n      getState,\n      setValue,\n      setTouched,\n      setDirty,\n      setError,\n      clearErrors,\n      runValidation,\n      removeField,\n      focus,\n      reset,\n      submit,\n    }),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    []\n  );\n\n  const reset: Reset<V> = useCallback(\n    (values, exclude, e) => {\n      if (e?.preventDefault) e.preventDefault();\n      if (e?.stopPropagation) e.stopPropagation();\n\n      const state = { ...stateRef.current };\n      const skip = arrayToMap(exclude || []);\n\n      Object.keys(state).forEach((key) => {\n        if (skip[key]) return;\n\n        if (key === \"values\") {\n          const nextValues =\n            (isFunction(values) ? values(stateRef.current.values) : values) ||\n            initialStateRef.current.values;\n\n          state[key] = nextValues;\n          initialStateRef.current.values = nextValues;\n          setNodesOrValues(nextValues, {\n            shouldSetValues: false,\n            fields: Array.from(fieldsRef.current.keys()).filter(\n              (name) => !isFieldArray(fieldArrayRef.current, name)\n            ),\n          });\n        } else {\n          // @ts-expect-error\n          state[key] = initialStateRef.current[key];\n        }\n      });\n\n      setStateRef(\"\", state);\n      onResetRef.current(state.values, getOptions(), e);\n\n      Object.values(fieldArrayRef.current).forEach((field) => field.reset());\n    },\n    [getOptions, onResetRef, setNodesOrValues, setStateRef, stateRef]\n  );\n\n  const submit: Submit<V> = useCallback(\n    async (e) => {\n      if (e?.preventDefault) e.preventDefault();\n      if (e?.stopPropagation) e.stopPropagation();\n\n      const nextTouched = [\n        ...Array.from(fieldsRef.current.keys()),\n        ...Object.keys(controlsRef.current),\n      ].reduce((touched, name) => {\n        touched = set(touched, name, true, true);\n        return touched;\n      }, stateRef.current.touched);\n\n      setStateRef(\"touched\", nextTouched);\n      setStateRef(\"isSubmitted\", false);\n      setStateRef(\"isSubmitting\", true);\n\n      try {\n        const isValid = await runValidation();\n\n        if (!isValid) {\n          const { errors } = stateRef.current;\n          onErrorRef.current(errors, getOptions(), e);\n          return { errors };\n        }\n\n        await onSubmitRef.current(stateRef.current.values, getOptions(), e);\n        setStateRef(\"isSubmitted\", true);\n\n        return { values: stateRef.current.values };\n      } catch (exception) {\n        warn(`💡 react-cool-form > submit: `, exception);\n        throw exception;\n      } finally {\n        setStateRef(\"isSubmitting\", false);\n      }\n    },\n    [getOptions, onErrorRef, onSubmitRef, runValidation, setStateRef, stateRef]\n  );\n\n  const handleChangeEvent = useCallback<HandleChangeEvent>(\n    (name, value) => {\n      setStateRef(`values.${name}`, value);\n      setDirtyIfNeeded(name);\n\n      if (validateOnChange) validateFieldWithLowPriority(name);\n    },\n    [\n      setDirtyIfNeeded,\n      setStateRef,\n      validateFieldWithLowPriority,\n      validateOnChange,\n    ]\n  );\n\n  const shouldRemoveField = useCallback<ShouldRemoveField>(\n    (name) => {\n      if (!removeOnUnmounted) return false;\n\n      let names = Array.isArray(removeOnUnmounted)\n        ? removeOnUnmounted\n        : [\n            ...Array.from(fieldsRef.current.keys()),\n            ...Object.keys(controlsRef.current),\n            ...Object.keys(fieldArrayRef.current),\n          ];\n      names = isFunction(removeOnUnmounted) ? removeOnUnmounted(names) : names;\n\n      return names.includes(name);\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    []\n  );\n\n  const removeField = useCallback<RemoveField>(\n    (name, exclude) => {\n      const { defaultValue, ...rest } = arrayToMap(exclude || [], {\n        value: \"values\",\n        error: \"errors\",\n      });\n\n      if (!defaultValue)\n        initialStateRef.current.values = unset(\n          initialStateRef.current.values,\n          name,\n          true\n        );\n\n      [\"values\", \"touched\", \"dirty\", \"errors\"].forEach((key, idx, arr) => {\n        const shouldForceUpdate = idx === arr.length - 1;\n\n        if (\n          !rest[key] &&\n          !isUndefined(get(stateRef.current[key as keyof FormState<V>], name))\n        )\n          handleUnset(`${key}.${name}`, {\n            shouldSkipUpdate: !shouldForceUpdate,\n            shouldForceUpdate,\n          });\n      });\n\n      delete fieldParsersRef.current[name];\n      delete fieldValidatorsRef.current[name];\n      delete fieldArrayRef.current[name];\n      delete controlsRef.current[name];\n\n      if (fieldsRef.current.has(name)) fieldsRef.current.delete(name);\n    },\n    [handleUnset, stateRef]\n  );\n\n  const registerForm = useCallback<RegisterForm>(\n    (el) => {\n      if (!el) return;\n\n      formRef.current = el;\n      const form = formRef.current;\n\n      fieldsRef.current = getFields(form);\n      setNodesOrValues(initialStateRef.current.values);\n\n      handlersRef.current.change = ({ target }: Event) => {\n        const { name } = target as FieldElement;\n\n        if (fieldsRef.current.has(name) && !controlsRef.current[name]) {\n          const parse = fieldParsersRef.current[name]?.parse;\n          const value = getNodeValue(name);\n\n          handleChangeEvent(name, parse ? parse(value) : value);\n          changedFieldRef.current = name;\n        }\n      };\n\n      handlersRef.current.blur = ({ target }: Event) => {\n        if (!isFieldElement(target as HTMLElement)) return;\n\n        const { name } = target as FieldElement;\n\n        if (fieldsRef.current.has(name) && !controlsRef.current[name]) {\n          setTouchedMaybeValidate(name);\n          changedFieldRef.current = undefined;\n        }\n      };\n\n      handlersRef.current.submit = (e: Event) => submit(e as any);\n\n      handlersRef.current.reset = (e: Event) => reset(null, null, e as any);\n\n      form.addEventListener(\"input\", handlersRef.current.change);\n      form.addEventListener(\"focusout\", handlersRef.current.blur);\n      form.addEventListener(\"submit\", handlersRef.current.submit);\n      form.addEventListener(\"reset\", handlersRef.current.reset);\n\n      mutationObserverRef.current = new MutationObserver(([{ type }]) => {\n        if (type !== \"childList\") return;\n\n        const fields = getFields(form);\n        let { values } = initialStateRef.current;\n\n        fieldsRef.current.forEach((_, name) => {\n          if (!shouldRemoveField(name)) return;\n          if (controlsRef.current[name]) return;\n\n          if (!fields.has(name)) {\n            removeField(\n              name,\n              !isFieldArray(fieldArrayRef.current, name) ||\n                isUndefined(\n                  get(initialStateRef.current.values, name.split(\".\")[0])\n                )\n                ? undefined\n                : [\"defaultValue\"]\n            );\n\n            return;\n          }\n\n          const currOptions = fieldsRef.current.get(name)?.options\n            ?.length as number;\n          const nextOptions = fields.get(name).options?.length as number;\n\n          if (currOptions > nextOptions) {\n            setStateRef(`values.${name}`, getNodeValue(name, fields), {\n              shouldSkipUpdate: true,\n            });\n          } else if (currOptions < nextOptions) {\n            setNodeValue(name, get(values, name), fields);\n          }\n        });\n\n        const addedNodes: string[] = [];\n\n        fields.forEach((_, name) => {\n          if (fieldsRef.current.has(name) || controlsRef.current[name]) return;\n\n          const value = get(stateRef.current.values, name);\n          if (!isUndefined(value)) values = set(values, name, value, true);\n\n          addedNodes.push(name);\n        });\n\n        fieldsRef.current = fields;\n        if (addedNodes.length) setNodesOrValues(values, { fields: addedNodes });\n      });\n\n      mutationObserverRef.current.observe(form, {\n        childList: true,\n        subtree: true,\n      });\n    },\n    [\n      getFields,\n      getNodeValue,\n      handleChangeEvent,\n      removeField,\n      reset,\n      setNodeValue,\n      setNodesOrValues,\n      setStateRef,\n      setTouchedMaybeValidate,\n      shouldRemoveField,\n      stateRef,\n      submit,\n    ]\n  );\n\n  const registerField = useCallback<RegisterField<V>>(\n    (value) => (field) => {\n      if (\n        !field?.name ||\n        controlsRef.current[field.name] ||\n        excludeFieldsRef.current[field.name]\n      )\n        return;\n\n      if (isFunction(value)) {\n        fieldValidatorsRef.current[field.name] = value;\n        return;\n      }\n\n      const { validate: validator, ...parsers } = value;\n\n      if (validator) fieldValidatorsRef.current[field.name] = validator;\n      fieldParsersRef.current[field.name] = parsers;\n    },\n    []\n  );\n\n  shared.set(id, {\n    validateOnChange,\n    shouldRemoveField,\n    initialStateRef,\n    fieldArrayRef,\n    controlsRef,\n    observersRef,\n    fieldValidatorsRef,\n    changedFieldRef,\n    setStateRef,\n    getNodeValue,\n    getFormState,\n    setDefaultValue,\n    setNodesOrValues,\n    setTouchedMaybeValidate,\n    handleChangeEvent,\n    removeField,\n    form: registerForm,\n    field: registerField,\n    focus,\n    use,\n    getState,\n    setValue,\n    setTouched,\n    setDirty,\n    setError,\n    clearErrors,\n    runValidation,\n    reset,\n    submit,\n  });\n\n  useEffect(\n    () => () => {\n      if (formRef.current) {\n        const handlers = handlersRef.current as Required<Handlers>;\n\n        formRef.current.removeEventListener(\"input\", handlers.change);\n        formRef.current.removeEventListener(\"focusout\", handlers.blur);\n        formRef.current.removeEventListener(\"submit\", handlers.submit);\n        formRef.current.removeEventListener(\"reset\", handlers.reset);\n        mutationObserverRef.current?.disconnect();\n      }\n\n      shared.remove(id);\n    },\n    [id]\n  );\n\n  return {\n    form: registerForm,\n    field: registerField,\n    focus,\n    removeField,\n    use,\n    getState,\n    setValue,\n    setTouched,\n    setDirty,\n    setError,\n    clearErrors,\n    runValidation,\n    reset,\n    submit,\n  };\n};\n","import { useReducer, useRef, useCallback } from \"react\";\nimport { dequal } from \"dequal/lite\";\n\nimport {\n  FormState,\n  FormStateReturn,\n  Observer,\n  OnStateChange,\n  SetStateRef,\n} from \"../types\";\nimport useLatest from \"./useLatest\";\nimport { get, getIsDirty, isEmptyObject, set } from \"../utils\";\n\nexport default <V>(\n  initialState: FormState<V>,\n  onChange?: OnStateChange<V>\n): FormStateReturn<V> => {\n  const [, forceUpdate] = useReducer((c) => c + 1, 0);\n  const stateRef = useRef(initialState);\n  const observersRef = useRef<Observer<V>[]>([\n    { usedState: {}, notify: forceUpdate },\n  ]);\n  const onChangeRef = useLatest(onChange || (() => undefined));\n\n  const setStateRef = useCallback<SetStateRef>(\n    (path, value, { fieldPath, shouldSkipUpdate, shouldForceUpdate } = {}) => {\n      const key = path.split(\".\")[0];\n\n      if (!key) {\n        if (!dequal(stateRef.current, value)) {\n          stateRef.current = value;\n          onChangeRef.current(stateRef.current);\n\n          observersRef.current.forEach(\n            ({ usedState, notify }) =>\n              !isEmptyObject(usedState) && notify(stateRef.current)\n          );\n        }\n\n        return;\n      }\n\n      if (\n        (path !== \"values\" && key === \"values\") ||\n        !dequal(get(stateRef.current, path), value)\n      ) {\n        const state = set(stateRef.current, path, value, true);\n        const {\n          errors,\n          dirty,\n          isDirty: prevIsDirty,\n          isValid: prevIsValid,\n          submitCount: prevSubmitCount,\n        } = state;\n        let { submitCount: currSubmitCount } = state;\n        const isDirty = key === \"dirty\" ? getIsDirty(dirty) : prevIsDirty;\n        const isValid = key === \"errors\" ? isEmptyObject(errors) : prevIsValid;\n        const submitCount =\n          key === \"isSubmitting\" && value\n            ? (currSubmitCount += 1)\n            : currSubmitCount;\n\n        stateRef.current = { ...state, isDirty, isValid, submitCount };\n        onChangeRef.current(stateRef.current);\n\n        if (shouldSkipUpdate) return;\n\n        path = fieldPath || path;\n        observersRef.current.forEach(\n          ({ usedState, notify }) =>\n            (shouldForceUpdate ||\n              Object.keys(usedState).some(\n                (k) => path.startsWith(k) || k.startsWith(path)\n              ) ||\n              (usedState.isDirty && isDirty !== prevIsDirty) ||\n              (usedState.isValid && isValid !== prevIsValid) ||\n              (usedState.submitCount && submitCount !== prevSubmitCount)) &&\n            notify(stateRef.current)\n        );\n      }\n    },\n    [onChangeRef]\n  );\n\n  return { stateRef, setStateRef, observersRef };\n};\n","import { FieldElement } from \"../types\";\n\nexport default (field: FieldElement): field is HTMLSelectElement =>\n  field.type === \"select-one\";\n","export default (element: HTMLElement): element is HTMLInputElement =>\n  element.tagName === \"INPUT\";\n","import { FieldElement } from \"../types\";\n\nexport default (field: FieldElement): field is HTMLInputElement =>\n  field.type === \"number\";\n","import { FieldElement } from \"../types\";\n\nexport default (field: FieldElement): field is HTMLInputElement =>\n  field.type === \"range\";\n","export default (callback: (args: any) => any): any =>\n  (\n    window.requestIdleCallback ||\n    ((cb) => {\n      const start = Date.now();\n      return setTimeout(\n        () =>\n          cb({\n            didTimeout: false,\n            timeRemaining: /* istanbul ignore next */ () =>\n              Math.max(0, 50 - (Date.now() - start)),\n          }),\n        1\n      );\n    })\n  )(callback, { timeout: 2000 });\n","import { FormMethods, FormValues, Methods } from \"./types\";\nimport { get } from \"./shared\";\nimport { invariant } from \"./utils\";\n\nexport default <V extends FormValues = FormValues>(\n  formId?: string\n): FormMethods<V> => {\n  const methods: Methods<V> = get(formId);\n\n  invariant(\n    !methods,\n    '💡 react-cool-form > useFormMethods: It must work with an \"useForm\" hook. See: https://react-cool-form.netlify.app/docs/api-reference/use-form'\n  );\n\n  const {\n    form,\n    field,\n    focus,\n    removeField,\n    use,\n    getState,\n    setValue,\n    setTouched,\n    setDirty,\n    setError,\n    clearErrors,\n    runValidation,\n    reset,\n    submit,\n  } = methods;\n\n  return {\n    form,\n    field,\n    focus,\n    removeField,\n    use,\n    getState,\n    setValue,\n    setTouched,\n    setDirty,\n    setError,\n    clearErrors,\n    runValidation,\n    reset,\n    submit,\n  };\n};\n"],"names":["one","all","get","get$1","id","useLatest","val","ref","useRef","arrayToMap","arr","map","obj","key","isFileList","value","FileList","isObject","cloneObject","object","Event","Error","Date","Array","Object","compact","Boolean","isPlainObject","deepMerge","objects","prev","prevValue","currValue","isUndefined","undefined","filterErrors","error","touched","nextErrors","stringToPath","str","TypeError","path","defaultValue","getIsDirty","dirty","search","dty","found","getPath","isFunction","isAsyncFunction","isCheckboxInput","field","isEmptyObject","isFieldArray","fields","name","callback","fieldName","isFieldElement","element","isFileInput","isRadioInput","isSelectMultiple","parseState","state","pathHandler","stateHandler","isGetState","p","paths","s","parsedState","set","immutable","segs","idx","Number","nextIsNumber","newObject","setValuesAsTrue","unset","refObject","target","index","last","t","useFormState","configOrCallback","formId","config","observerRef","forceUpdate","useReducer","c","observersRef","methods","o","getFormState","methodName","usedState","notify","useControlled","validate","parse","errorWithTouched","shared","isTouched","isDirty","shouldRemoveField","initialStateRef","fieldArrayRef","fieldValidatorsRef","changedFieldRef","getState","getNodeValue","setDefaultValue","setTouchedMaybeValidate","handleChangeEvent","removeField","isFieldArr","initialVal","onChange","props","onBlur","meta","format","e","restProps","useFieldArray","validateOnChange","setNodesOrValues","setStateRef","runValidation","getFields","useCallback","init","_","useState","setFields","updateFields","shouldSetValues","reset","setState","handler","shouldTouched","shouldDirty","fieldsLength","_state$values$name","f","type","lastIndex","swap","indexA","indexB","move","from","to","push","insert","remove","useForm","validateOnBlur","focusOnError","removeOnUnmounted","builtInValidationMode","onReset","onSubmit","onError","handlersRef","mutationObserverRef","formRef","fieldsRef","Map","fieldParsersRef","controlsRef","formValidatorRef","excludeFieldsRef","excludeFields","onResetRef","onSubmitRef","onErrorRef","hasWarnValues","values","defaultValues","errors","isValidating","isValid","isSubmitting","isSubmitted","submitCount","stateRef","initialState","onChangeRef","shouldSkipUpdate","shouldForceUpdate","dequal","prevIsDirty","prevIsValid","prevSubmitCount","currSubmitCount","fieldPath","k","onStateChange","handleUnset","options","handleFocus","n","_fieldsRef$current$ge2","form","fieldId","classList","rcfExclude","exclude","acc","elm","fieldArrayName","isSelectOne","isInputElement","_fieldParsersRef$curr","_fieldParsersRef$curr2","isNumberInput","isRangeInput","checkbox","radio","option","setNodeValue","shouldUpdateDefaultValue","setError","clearErrors","runBuiltInValidation","validity","validationMessage","runAllBuiltInValidation","runFieldValidation","async","exception","runAllFieldsValidation","promises","Promise","cur","runFormValidation","validateField","hasAsyncValidator","validateFieldWithLowPriority","runWithLowPriority","window","cb","start","setTimeout","didTimeout","timeRemaining","Math","timeout","validateForm","errs","shouldFocus","names","dfValues","v","focus","delay","setTouched","shouldValidate","setDirty","setDirtyIfNeeded","setValue","getOptions","submit","skip","nextValues","nextTouched","rest","el","handlersRef.current.change","_fieldParsersRef$curr3","handlersRef.current.blur","handlersRef.current.submit","handlersRef.current.reset","MutationObserver","currOptions","_fieldsRef$current$ge3","_fieldsRef$current$ge4","nextOptions","_fields$get$options","addedNodes","childList","subtree","validator","parsers","set$1","registerForm","registerField","use","handlers","useFormMethods"],"mappings":"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"}